apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.redis.name }}-statefulset
  namespace: {{ .Release.Namespace | default "default" }}
  labels:
    app: {{ .Values.redis.name }}
spec:
  serviceName: "{{ .Values.redis.serviceName }}"
  replicas: {{ .Values.redis.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.redis.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.redis.name }}
    spec:
      securityContext:
        fsGroup: 999   
      initContainers:
        - name: fix-redis-permissions
          image: busybox:1.35
          command: ['sh', '-c', 'chown -R 999:999 /var/lib/redis']
          volumeMounts:
            - name: redis-data
              mountPath: /var/lib/redis
      containers:
        - name: redis
          image: "{{ .Values.redis.image }}"
          command: ["redis-server"]
          args: ["/etc/redis/redis.conf"]
          ports:
            - containerPort: {{ .Values.redis.port }}
          volumeMounts:
            - name: redis-data
              mountPath: /var/lib/redis
            - name: redis-conf
              mountPath: /etc/redis
          livenessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
      volumes:
        - name: redis-conf
          configMap:
            name: redis-conf
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.redis.storage.size }}
        storageClassName: {{ .Values.redis.storage.storageClass }}