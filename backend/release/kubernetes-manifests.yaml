apiVersion: v1
kind: Namespace
metadata:
  name: authenthication-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
  namespace: authenthication-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: authenthication-service
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: management
      protocol: TCP
      port: 15672
      targetPort: 15672

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: authenthication-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: authenthication-service
spec:
  selector:
    app: redis
  ports:
    - name: redis
      protocol: TCP
      port: 6379
      targetPort: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authmongo-deployment
  namespace: authenthication-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-mongo
  template:
    metadata:
      labels:
        app: auth-mongo
    spec:
      containers:
        - name: auth-mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard-storage
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard # Use 'pd-ssd' for faster disks if needed
  fsType: ext4
reclaimPolicy: Retain # Retain disk data after PVC deletion
volumeBindingMode: WaitForFirstConsumer # Delay binding until the pod is scheduled

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: authenthication-service
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-storage

---
apiVersion: v1
kind: Service
metadata:
  name: auth-mongo-srv
  namespace: authenthication-service
spec:
  selector:
    app: auth-mongo
  ports:
    - name: mongo
      port: 27017
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentservice-deployment
  namespace: authenthication-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentservice
  template:
    metadata:
      labels:
        app: authentservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
          image: gcr.io/ferrous-kayak-447111-i4/authentservice:latest
          ports:
            - containerPort: 50051
          env:
            - name: PORT
              value: '50051'
            - name: MONGO_DB
              value: 'mongodb://auth-mongo-srv.authenthication-service.svc.cluster.local:27017/authenthication'
            - name: REDIS_HOST
              value: 'redis-service.authenthication-service.svc.cluster.local'
            - name: REDIS_PORT
              value: '6379'
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          readinessProbe:
            httpGet:
              path: /health
              port: 50051
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 50051
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: authentservice
  namespace: authenthication-service
spec:
  type: ClusterIP
  selector:
    app: authentservice
  ports:
    - name: http
      port: 80
      targetPort: 50051

---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: authentservice-cert-renamed
  namespace: authenthication-service
spec:
  domains:
    - backend.conceptocar.xyz

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authentservice-ingress
  namespace: authenthication-service
  annotations:
    kubernetes.io/ingress.class: gce
    networking.gke.io/managed-certificates: authentservice-cert-renamed
spec:
  rules:
    - host: backend.conceptocar.xyz
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: authentservice
                port:
                  number: 80
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: authenthication-service
  name: authentservice-role
rules:
  - apiGroups: ['']
    resources: ['pods', 'services', 'endpoints', 'configmaps', 'secrets']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentservice-rolebinding
  namespace: authenthication-service
subjects:
  - kind: ServiceAccount
    name: default
    namespace: authenthication-service
roleRef:
  kind: Role
  name: authentservice-role
  apiGroup: rbac.authorization.k8s.io
---
# # #ADD THIS TO PROD INSTEAD OF CURRENT RBAC MINIMAL REQ FOR PROD

# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: authentservice-namespace
#   name: authentservice-role
# rules:
#   - apiGroups: ['']
#     resources: ['configmaps', 'secrets']
#     verbs: ['get', 'list']
#   - apiGroups: ['']
#     resources: ['pods']
#     verbs: ['get', 'list', 'watch']

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: authentservice-rolebinding
#   namespace: authentservice-namespace
# subjects:
#   - kind: ServiceAccount
#     name: authentservice-sa
#     namespace: authentservice-namespace
# roleRef:
#   kind: Role
#   name: authentservice-role
#   apiGroup: rbac.authorization.k8s.io
