apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: { { .Values.rabbitmq.name } }
  namespace: { { .Release.Namespace | default .Values.namespace } }
  labels:
    app: { { .Values.rabbitmq.name } }
spec:
  serviceName: '{{ .Values.rabbitmq.name }}'
  replicas: { { .Values.rabbitmq.replicas } }
  selector:
    matchLabels:
      app: { { .Values.rabbitmq.name } }
  template:
    metadata:
      labels:
        app: { { .Values.rabbitmq.name } }
    spec:
      containers:
        - name: { { .Values.rabbitmq.name } }
          image: '{{ .Values.rabbitmq.image }}'
          ports:
            - containerPort: { { .Values.rabbitmq.ports.amqp } }
            - containerPort: { { .Values.rabbitmq.ports.management } }
          resources:
            requests:
              cpu: { { .Values.rabbitmq.resources.requests.cpu } }
              memory: { { .Values.rabbitmq.resources.requests.memory } }
            limits:
              cpu: { { .Values.rabbitmq.resources.limits.cpu } }
              memory: { { .Values.rabbitmq.resources.limits.memory } }
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-cookie-secret
                  key: RABBITMQ_ERLANG_COOKIE
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes: ['ReadWriteOnce']
        resources:
          requests:
            storage: { { .Values.rabbitmq.storage.size } }
        storageClassName: { { .Values.rabbitmq.storage.storageClass } }
