apiVersion: v1
kind: Namespace
metadata:
  name: deployments
---
apiVersion: v1
kind: Namespace
metadata:
  name: databases

---
apiVersion: v1
kind: Service
metadata:
  name: auth-mongo-srv
  namespace: databases
spec:
  selector:
    app: auth-mongo
  ports:
    - name: mongo
      port: 27017
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentservice-deployment
  namespace: deployments
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentservice
  template:
    metadata:
      labels:
        app: authentservice
    spec:
      containers:
        - name: server
          image: gcr.io/ferrous-kayak-447111-i4/authentservice:latest
          ports:
            - containerPort: 50051
          envFrom:
            - secretRef:
                name: authservice-secrets
          resources:
            requests:
              cpu: '250m'
              memory: '256Mi'
            limits:
              cpu: '500m'
              memory: '512Mi'
          readinessProbe:
            httpGet:
              path: /health
              port: 50051
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 50051
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: authentservice
  namespace: deployments
spec:
  type: LoadBalancer
  selector:
    app: authentservice
  ports:
    - name: http
      port: 80
      targetPort: 50051

---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: authentservice-cert-renamed
  namespace: deployments
spec:
  domains:
    - backend.conceptocar.xyz

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authentservice-ingress
  namespace: deployments
  annotations:
    kubernetes.io/ingress.class: gce
    networking.gke.io/managed-certificates: authentservice-cert-renamed
spec:
  rules:
    - host: backend.conceptocar.xyz
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: authentservice
                port:
                  number: 80

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: default
spec:
  serviceName: rabbitmq-service
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-cookie-secret
                  key: RABBITMQ_ERLANG_COOKIE
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
          resources:
            requests:
              cpu: '250m'
              memory: '256Mi'
            limits:
              cpu: '500m'
              memory: '512Mi'
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes: ['ReadWriteOnce']
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard-storage

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: default
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: management
      protocol: TCP
      port: 15672
      targetPort: 15672

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: default
spec:
  serviceName: redis-service
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          command:
            - 'redis-server'
            - '--cluster-enabled'
            - 'yes'
            - '--cluster-config-file'
            - '/data/nodes.conf'
            - '--cluster-node-timeout'
            - '5000'
            - '--appendonly'
            - 'yes'
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: '250m'
              memory: '256Mi'
            limits:
              cpu: '500m'
              memory: '512Mi'
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 15
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 20
            periodSeconds: 20
          volumeMounts:
            - name: redis-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ['ReadWriteOnce']
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard-storage

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
spec:
  selector:
    app: redis
  ports:
    - name: redis
      protocol: TCP
      port: 6379
      targetPort: 6379

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: authentservice-hpa
  namespace: deployments
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: authentservice-deployment
  minReplicas: 1
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 40

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rabbitmq-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: rabbitmq
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: redis-cluster
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authmongo-statefulset
  namespace: databases
spec:
  serviceName: 'authmongo'
  replicas: 1
  selector:
    matchLabels:
      app: auth-mongo
  template:
    metadata:
      labels:
        app: auth-mongo
    spec:
      containers:
        - name: auth-mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          resources:
            requests:
              cpu: '250m'
              memory: '256Mi'
            limits:
              cpu: '500m'
              memory: '512Mi'
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-storage
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard-storage

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard-storage
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
  fsType: ext4
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: databases
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-storage

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: deployments
  name: authentservice-role
rules:
  - apiGroups: ['']
    resources: ['configmaps', 'secrets']
    verbs: ['get', 'list']
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['get', 'list', 'watch']

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentservice-rolebinding
  namespace: deployments
subjects:
  - kind: ServiceAccount
    name: authentservice-sa
    namespace: deployments
roleRef:
  kind: Role
  name: authentservice-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: authentservice-pdb
  namespace: deployments
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: authentservice

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rabbitmq-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: rabbitmq

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
